{"version":3,"sources":["next-ajax.js"],"names":[],"mappingsfile":"next-ajax.js","sourcesContent":["(function() {\n  var global = global || this || window || Function('return this')();\n  var nx = global.nx || require('next-js-core2');\n  var NxXhr = nx.Xhr || require('next-xhr');\n  var nxParam = nx.param || require('next-param');\n  var nxCapitalize = nx.capitalize || require('next-capitalize');\n  var nxDefaults = nx.defaults || require('next-defaults');\n  var NxDataTransform = nx.DataTransform || require('next-data-transform');\n  var NxXhrHeader = nx.XhrHeader || require('next-xhr-header');\n  var RETURN_DATA = function(inValue) { return inValue && inValue.data; };\n  var RETURN_VALUE = function(inValue) { return inValue; };\n  var STATUS_CODE = {\n    success: 0,\n    fail: 1,\n    timeout: 2,\n    /** some codesgs backup */\n    complete: 10\n  };\n  var DEFAULT_OPTIONS = {\n    async: true,\n    timeout: 3000,\n    contentType: 'json',\n    headers: {},\n    onRequest: RETURN_DATA,\n    onResponse: RETURN_VALUE,\n    onSuccess: nx.noop,\n    onFail: nx.noop,\n    onComplete: nx.noop,\n    onTimeout: nx.noop\n  };\n\n  var NxAjax = nx.declare('nx.Ajax', {\n    properties: {\n      $success: {\n        get: function() {\n          var xhr = this.xhr;\n          try {\n            return (\n              (!xhr.status && location.protocol == 'file:') ||\n              (xhr.status >= 200 && xhr.status < 300) ||\n              xhr.status == 304 ||\n              (navigator.userAgent.indexOf('Safari') > -1 && typeof xhr.status == 'undefined')\n            );\n          } catch (_) {}\n          return false;\n        }\n      },\n      $url: {\n        get: function() {\n          var method = this.method;\n          var url = this.url;\n          return method === 'GET'\n            ? url + (url.indexOf('?') > -1 ? '&' : '?') + nxParam(this.data)\n            : url;\n        }\n      },\n      $data: {\n        get: function() {\n          var method = this.method;\n          var contentType = this.options.contentType;\n          var data = NxDataTransform[contentType](this.data);\n          return method === 'GET' ? data : null;\n        }\n      }\n    },\n    methods: {\n      init: function(inMethod, inUrl, inData, inOptions) {\n        this.method = (inMethod || 'GET').toUpperCase();\n        this.data = inData;\n        this.url = inUrl;\n        this.options = nx.mix(null, DEFAULT_OPTIONS, inOptions);\n        this.xhr = NxXhr.create();\n        this.header = new NxXhrHeader(this.xhr);\n      },\n      destroy: function() {\n        this.xhr.abort();\n        this.xhr.onreadystatechange = null;\n      },\n      fetch: function() {\n        var isTimeout = false;\n        var isComplete = false;\n        var options = this.options;\n        var contentType = options.contentType;\n        var xhr = this.xhr;\n        var headers = nx.mix({ 'Content-Type': contentType }, options.headers);\n        var self = this;\n        var timer = null;\n        var action;\n        var body;\n\n        //1. attache listener:\n        xhr.onreadystatechange = function() {\n          if (xhr.readyState === 4) {\n            if (!isTimeout) {\n              action = self.$success ? 'success' : 'fail';\n              options['on' + nxCapitalize(action)](self.onResponse(action));\n              options.onComplete(self.onResponse('complete'));\n            }\n            isComplete = true;\n          }\n        };\n\n        //2. open and send:\n        xhr.open(this.method, this.$url, this.options.async);\n        this.header = { request: headers };\n        body = this.onRequest();\n        xhr.send(body);\n\n        //3. set timeout handler:\n        timer && clearTimeout(timer);\n        timer = global.setTimeout(function() {\n          if (!isComplete) {\n            isTimeout = true;\n            options.onTimeout(self.onResponse('timeout'));\n            options.onComplete(self.onResponse('complete'));\n          }\n        }, options.timeout);\n      },\n      onResponse: function(inStatus) {\n        var xhr = this.xhr;\n        var options = this.options;\n        return options.onResponse({\n          status: inStatus,\n          code: nxDefaults(STATUS_CODE[inStatus], -1),\n          data: xhr.responseText,\n          xhr: xhr\n        });\n      },\n      onRequest: function() {\n        var options = this.options;\n        return options.onRequest({\n          xhr: this.xhr,\n          method: this.method,\n          url: this.$url,\n          data: this.$data,\n          options: options\n        });\n      }\n    }\n  });\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = NxAjax;\n  }\n})();\n"]}