{"version":3,"sources":["next-ajax.js"],"names":[],"mappingsfile":"next-ajax.js","sourcesContent":["(function() {\n  var global = global || this || window || Function('return this')();\n  var nx = global.nx || require('next-js-core2');\n  var NxXhr = nx.Xhr || require('next-xhr');\n  var NxJson = nx.json || require('next-json');\n  var nxParam = nx.param || require('next-param');\n  var nxContentType = nx.contentType || require('next-content-type');\n  var nxCapitalize = nx.capitalize || require('next-capitalize');\n  var NxDataTransform = nx.DataTransform || require('next-data-transform');\n  var CONTENT_TYPE = 'Content-Type';\n  var DEFAULT_OPTIONS = {\n    async: true,\n    timeout: 3000,\n    contentType: 'json',\n    headers: {},\n    onRequest: nx.noop,\n    onResponse: nx.noop,\n    onSuccess: nx.noop,\n    onError: nx.noop,\n    onComplete: nx.noop,\n    onTimeout: nx.noop\n  };\n\n  var NxAjax = nx.declare('nx.Ajax', {\n    properties: {\n      success: {\n        get: function() {\n          var xhr = this.xhr;\n          try {\n            return (\n              (!xhr.status && location.protocol == 'file:') ||\n              (xhr.status >= 200 && xhr.status < 300) ||\n              xhr.status == 304 ||\n              (navigator.userAgent.indexOf('Safari') > -1 && typeof xhr.status == 'undefined')\n            );\n          } catch (_) {}\n          return false;\n        }\n      },\n      url: {\n        get: function() {\n          var method = this.method;\n          var url = this.url;\n          return method === 'GET'\n            ? url + (url.indexOf('?') > -1 ? '&' : '?') + nxParam(this.data)\n            : url;\n        }\n      },\n      data: function() {\n        var method = this.method;\n        return method === 'GET' ? this.data : null;\n      }\n    },\n    methods: {\n      init: function(inMethod, inUrl, inData, inOptions) {\n        this.method = (inMethod || 'GET').toUpperCase();\n        this.url = inUrl;\n        this.data = inData;\n        this.options = nx.mix(null, DEFAULT_OPTIONS, inOptions);\n        this.xhr = NxXhr.create();\n      },\n      onIntercept: function(inAction) {\n        var action = 'on' + nxCapitalize(inAction);\n        inOptions[action]({\n          xhr: this.xhr,\n          method: this.method,\n          url: this.url,\n          xhr: this.data,\n          options: this.options\n        });\n      },\n      onStateChange: function() {\n        var options = this.options;\n        if (this.success) {\n          this.onIntercept('response');\n          options.onSuccess(this.result('success'));\n        } else {\n          options.onFail(this.result('fail'));\n        }\n        options.onComplete(this.result('complete'));\n      },\n      onResult: function(inStatus, inResult) {\n        var contentType = this.options.contentType;\n        var xhr = this.xhr;\n        return {\n          status: inStatus || 'unknown',\n          code: inResult.code,\n          data: NxDataTransform[contentType](xhr.responseText),\n          xhr: xhr\n        };\n      },\n      result: function(inStatus) {\n        var res = { code: -1 };\n        switch (inStatus) {\n          case 'success':\n            res = { code: 0 };\n            break;\n          case 'fail':\n            res = { code: 1 };\n            break;\n          case 'timeout':\n            res = { code: 2 };\n            break;\n          case 'complete':\n            res = { code: 3 };\n            break;\n          default:\n            res = { code: -1 };\n            break;\n        }\n        return this.onResult(inStatus, res);\n      },\n      setContentType: function() {\n        var contentType = this.options.contentType;\n        this.xhr.setRequestHeader(CONTENT_TYPE, nxContentType(contentType));\n      },\n      setHeaders: function() {\n        var headers = this.options.headers;\n        nx.forIn(\n          headers,\n          function(key, value) {\n            this.xhr.setRequestHeader(key, value);\n          },\n          this\n        );\n      },\n      request: function() {\n        var isTimeout = false;\n        var isComplete = false;\n        var options = this.options;\n        var xhr = this.xhr;\n        var self = this;\n\n        xhr.onreadystatechange = function() {\n          if (xhr.readyState == 4) {\n            if (!isTimeout) {\n              self.onStateChange();\n            }\n            isComplete = true;\n          }\n        };\n\n        // open and send:\n        xhr.open(this.method, this.url, this.options.async);\n        this.onIntercept('request');\n        this.setContentType();\n        this.setHeaders();\n        xhr.send(this.data);\n\n        // set timeout handler:\n        this._timer && clearTimeout(this._timer);\n        this._timer = global.setTimeout(function() {\n          if (!isComplete) {\n            isTimeout = true;\n            options.onTimeout(self.result('timeout'));\n            options.onComplete(self.result('complete'));\n          }\n        }, options.timeout);\n      }\n    }\n  });\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = NxAjax;\n  }\n})();\n"]}